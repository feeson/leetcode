package y23.m9.d22;
/**
 请你判断一个9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。


 数字1-9在每一行只能出现一次。
 数字1-9在每一列只能出现一次。
 数字1-9在每一个以粗实线分隔的3x3宫内只能出现一次。（请参考示例图）




 注意：


 一个有效的数独（部分已被填充）不一定是可解的。
 只需要根据以上规则，验证已经填入的数字是否有效即可。
 空白格用'.'表示。




 示例 1：

 输入：board =
 [["5","3",".",".","7",".",".",".","."]
 ,["6",".",".","1","9","5",".",".","."]
 ,[".","9","8",".",".",".",".","6","."]
 ,["8",".",".",".","6",".",".",".","3"]
 ,["4",".",".","8",".","3",".",".","1"]
 ,["7",".",".",".","2",".",".",".","6"]
 ,[".","6",".",".",".",".","2","8","."]
 ,[".",".",".","4","1","9",".",".","5"]
 ,[".",".",".",".","8",".",".","7","9"]]
 输出：true


 示例 2：

 输入：board =
 [["8","3",".",".","7",".",".",".","."]
 ,["6",".",".","1","9","5",".",".","."]
 ,[".","9","8",".",".",".",".","6","."]
 ,["8",".",".",".","6",".",".",".","3"]
 ,["4",".",".","8",".","3",".",".","1"]
 ,["7",".",".",".","2",".",".",".","6"]
 ,[".","6",".",".",".",".","2","8","."]
 ,[".",".",".","4","1","9",".",".","5"]
 ,[".",".",".",".","8",".",".","7","9"]]
 输出：false
 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。



 提示：


 board.length == 9
 board[i].length == 9
 board[i][j] 是一位数字（1-9）或者 '.'


 */
/*
https://leetcode.cn/problems/valid-sudoku/?envType=study-plan-v2&envId=top-interview-150
*/
class Solutionp2 {
    public boolean isValidSudoku(char[][] board) {
        boolean[][] row=new boolean[9][9];
        boolean[][] col=new boolean[9][9];
        boolean[][] mat=new boolean[9][9];
        for (int i=0;i<9;++i){
            for (int j=0;j<9;++j){
                if (board[i][j]!='.'){
                    int indx=board[i][j]-'1';
                    if (row[i][indx])
                        return false;
                    else
                        row[i][indx]=true;
                    if (col[j][indx])
                        return false;
                    else
                        col[j][indx]=true;
                    if (mat[getMat(i, j)][indx])
                        return false;
                    else
                        mat[getMat(i,j)][indx]=true;
                }
            }
        }
        return true;
    }
    int getMat(int i,int j){
        return (i/3)*3+j/3;
    }

//    public static void main(String[] args) {
//        Solution solution=new Solution();
//        String[][] board= new String[][]{{"5","3",".",".","7",".",".",".","."},{"6",".",".","1","9","5",".",".","."},{".","9","8",".",".",".",".","6","."},{"8",".",".",".","6",".",".",".","3"},{"4",".",".","8",".","3",".",".","1"},{"7",".",".",".","2",".",".",".","6"},{".","6",".",".",".",".","2","8","."},{".",".",".","4","1","9",".",".","5"},{".",".",".",".","8",".",".","7","9"}};
//        char[][] chars=new char[9][9];
//        for (int i=0;i<9;++i){
//            for (int j=0;j<9;++j){
//                chars[i][j]=board[i][j].toCharArray()[0];
//            }
//        }
//        System.out.println(solution.isValidSudoku(chars));
//    }
}